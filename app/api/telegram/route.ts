import { NextResponse } from "next/server";

/**
 * TELEGRAM_BOT_TOKEN  ‚Äì —Ç–æ–∫–µ–Ω BotFather
 * TELEGRAM_CHAT_ID    ‚Äì id —á–∞—Ç–∞ (–∏–ª–∏ –∫–∞–Ω–∞–ª–∞) –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
 * –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —á–∞—Ç–æ–≤, –Ω–∞–ø—Ä–∏–º–µ—Ä —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é: "id1,id2"
 * –û–±–∞ –∑–Ω–∞—á–µ–Ω–∏—è –≤ .env.local
 */
const TOKEN = process.env.TELEGRAM_BOT_TOKEN!;
const CHAT_ID = process.env.TELEGRAM_CHAT_ID!;

export async function POST(req: Request) {
  try {
    const body = await req.json();
    const { phone, name, total, items = [] } = body;

    const itemsList =
      Array.isArray(items) && items.length > 0
        ? items
            .map(
              (i: any) =>
                `‚Ä¢ ${i.title ?? "–¢–æ–≤–∞—Ä"}  √ó${i.quantity ?? 1}  ‚Äî  ${i.price}‚ÇΩ`
            )
            .join("\n")
        : "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ —Ç–æ–≤–∞—Ä–∞—Ö";

    const message = `
<b>üÜï –ù–æ–≤—ã–π –∑–∞–∫–∞–∑</b>
<b>–ò–º—è:</b> ${name || "‚Äî"}
<b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> ${phone || "‚Äî"}
<b>–°—É–º–º–∞:</b> ${total ?? 0} ‚ÇΩ

<b>–¢–æ–≤–∞—Ä—ã:</b>
${itemsList}
    `.trim();

    // –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —á–∞—Ç–æ–≤ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é
    const chatIds = CHAT_ID.split(",").map((id) => id.trim());

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∂–¥–æ–º—É —á–∞—Ç—É
    const results = await Promise.all(
      chatIds.map(async (chatId) => {
        const tgRes = await fetch(
          `https://api.telegram.org/bot${TOKEN}/sendMessage`,
          {
            method: "POST",
            headers: { "Content-Type": "application/json" },
            body: JSON.stringify({
              chat_id: chatId,
              text: message,
              parse_mode: "HTML",
            }),
          }
        );

        if (!tgRes.ok) {
          const err = await tgRes.text();
          return { chatId, success: false, error: err };
        }
        return { chatId, success: true };
      })
    );

    const anyFailed = results.some((r) => !r.success);

    if (anyFailed) {
      return NextResponse.json({ success: false, results }, { status: 500 });
    }

    return NextResponse.json({ success: true, results });
  } catch (e: any) {
    return NextResponse.json(
      { success: false, error: e.message },
      { status: 500 }
    );
  }
}
