import { NextResponse } from 'next/server';
import { supabaseAdmin } from '@/lib/supabase/server';

const TELEGRAM_TOKEN = process.env.TELEGRAM_BOT_TOKEN!;
const TELEGRAM_CHAT_ID = process.env.TELEGRAM_CHAT_ID!;

export async function POST(req: Request) {
  const {
    phone,
    name,
    recipient,
    address,
    deliveryMethod,
    date,
    time,
    payment,
    items: cart,
    total,
    bonuses_used = 0,
    bonus = 0,
    promo_id,
    promo_discount = 0,
    delivery_instructions,
    postcard_text,
    anonymous,
    whatsapp,
  } = await req.json();

  if (!phone || !name || !total || !cart) {
    console.error('Missing required fields:', { phone, name, total, cart });
    return NextResponse.json({ error: '–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è' }, { status: 400 });
  }

  // –†–∞–∑–¥–µ–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã –∏ upsell-–¥–æ–ø–æ–ª–Ω–µ–Ω–∏—è
  const regularItems = cart.filter((item: any) => !item.isUpsell);
  const upsellItems = cart.filter((item: any) => item.isUpsell);

  // –õ–æ–≥–∏—Ä—É–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –∫–æ—Ä–∑–∏–Ω—ã –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
  console.log('Cart items:', cart);
  console.log('Regular items:', regularItems);
  console.log('Upsell items:', upsellItems);

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ product_id –¥–ª—è –æ—Å–Ω–æ–≤–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤ —Å—É—â–µ—Å—Ç–≤—É—é—Ç –≤ —Ç–∞–±–ª–∏—Ü–µ products
  const productIds = regularItems
    .map((item: any) => parseInt(item.id, 10))
    .filter((id: number) => !isNaN(id));

  if (productIds.length !== regularItems.length) {
    console.error('Invalid product IDs (not numbers):', regularItems);
    return NextResponse.json(
      { error: '–ù–µ–∫–æ—Ç–æ—Ä—ã–µ ID —Ç–æ–≤–∞—Ä–æ–≤ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã (–Ω–µ —á–∏—Å–ª–∞)' },
      { status: 400 }
    );
  }

  if (productIds.length > 0) {
    const { data: products, error: productsError } = await supabaseAdmin
      .from('products')
      .select('id')
      .in('id', productIds);

    if (productsError) {
      console.error('Error checking products:', productsError);
      return NextResponse.json({ error: '–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–æ–≤–∞—Ä–æ–≤' }, { status: 500 });
    }

    console.log('Product IDs to check:', productIds);
    console.log('Existing products:', products);

    const existingProductIds = new Set(products.map((p: any) => p.id));
    const invalidItems = regularItems.filter((item: any) => !existingProductIds.has(parseInt(item.id, 10)));
    if (invalidItems.length > 0) {
      console.error('Invalid product IDs:', invalidItems);
      return NextResponse.json(
        { error: `–¢–æ–≤–∞—Ä—ã —Å ID ${invalidItems.map((i: any) => i.id).join(', ')} –Ω–µ –Ω–∞–π–¥–µ–Ω—ã` },
        { status: 400 }
      );
    }
  }

  // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–∫–∞–∑
  const { data: order, error: orderError } = await supabaseAdmin
    .from('orders')
    .insert([
      {
        phone,
        contact_name: name,
        recipient,
        address,
        delivery_method: deliveryMethod,
        delivery_date: date,
        delivery_time: time,
        payment_method: payment,
        total,
        bonuses_used,
        bonus,
        promo_id,
        promo_discount,
        status: '–û–∂–∏–¥–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è',
        created_at: new Date().toISOString(),
        delivery_instructions,
        postcard_text,
      },
    ])
    .select('id, order_number')
    .single();

  if (orderError || !order) {
    console.error('Error saving order:', orderError);
    return NextResponse.json({ error: '–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞' }, { status: 500 });
  }

  // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã –≤ order_items
  const orderItems = regularItems.map((item: any) => ({
    order_id: order.id,
    product_id: parseInt(item.id, 10),
    quantity: item.quantity,
    price: item.price,
  }));

  if (orderItems.length > 0) {
    const { error: itemError } = await supabaseAdmin.from('order_items').insert(orderItems);
    if (itemError) {
      console.error('Error saving order items:', itemError);
      return NextResponse.json({ error: '–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–æ–≤' }, { status: 500 });
    }
  }

  // –°–æ—Ö—Ä–∞–Ω—è–µ–º upsell-–¥–æ–ø–æ–ª–Ω–µ–Ω–∏—è
  const upsellDetails = upsellItems.map((item: any) => ({
    title: item.title,
    price: item.price,
    quantity: item.quantity,
    category: item.category, // postcard –∏–ª–∏ balloon
  }));

  const { error: updateOrderError } = await supabaseAdmin
    .from('orders')
    .update({ upsell_details: upsellDetails })
    .eq('id', order.id);

  if (updateOrderError) {
    console.error('Error saving upsell details:', updateOrderError);
    return NextResponse.json({ error: '–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–æ–ø–æ–ª–Ω–µ–Ω–∏–π' }, { status: 500 });
  }

  const baseUrl = new URL(req.url).origin;

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–ø–∏—Å–∞–Ω–∏—è –±–æ–Ω—É—Å–æ–≤
  if (bonuses_used > 0) {
    const res = await fetch(`${baseUrl}/api/redeem-bonus`, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ user_id: phone, amount: bonuses_used, order_id: order.id }),
    });
    if (!res.ok) {
      console.error('–û—à–∏–±–∫–∞ —Å–ø–∏—Å–∞–Ω–∏—è –±–æ–Ω—É—Å–æ–≤:', await res.text());
    }
  }

  // –ù–∞—á–∏—Å–ª–µ–Ω–∏–µ –±–æ–Ω—É—Å–æ–≤
  const resBonus = await fetch(`${baseUrl}/api/order-bonus`, {
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    body: JSON.stringify({ user_id: phone, order_total: total, order_id: order.id }),
  });
  if (!resBonus.ok) {
    console.error('–û—à–∏–±–∫–∞ –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è –±–æ–Ω—É—Å–æ–≤:', await resBonus.text());
  }

  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–º–æ–∫–æ–¥–∞
  if (promo_id) {
    // –°–Ω–∞—á–∞–ª–∞ –ø–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ used_count
    const { data: promoData, error: promoFetchError } = await supabaseAdmin
      .from('promo_codes')
      .select('used_count')
      .eq('id', promo_id)
      .single();

    if (promoFetchError || !promoData) {
      console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ–º–æ–∫–æ–¥–∞:', promoFetchError?.message);
    } else {
      const newUsedCount = (promoData.used_count || 0) + 1;
      const { error: promoUpdateError } = await supabaseAdmin
        .from('promo_codes')
        .update({ used_count: newUsedCount })
        .eq('id', promo_id);
      if (promoUpdateError) {
        console.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ–º–æ–∫–æ–¥–∞:', promoUpdateError.message);
      }
    }
  }

  // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è Telegram
  const itemsList = regularItems.length
    ? regularItems.map((i: any) => `‚Ä¢ ${i.title} √ó${i.quantity} ‚Äî ${i.price * i.quantity}‚ÇΩ`).join('\n')
    : '–ù–µ—Ç –æ—Å–Ω–æ–≤–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤';
  const upsellList = upsellItems.length
    ? upsellItems.map((i: any) => `‚Ä¢ ${i.title} (${i.category}) √ó${i.quantity} ‚Äî ${i.price}‚ÇΩ`).join('\n')
    : '–ù–µ—Ç –¥–æ–ø–æ–ª–Ω–µ–Ω–∏–π';
  const deliveryMethodText = deliveryMethod === 'pickup' ? '–°–∞–º–æ–≤—ã–≤–æ–∑' : '–î–æ—Å—Ç–∞–≤–∫–∞';
  const promoText = promo_id
    ? `<b>–ü—Ä–æ–º–æ–∫–æ–¥:</b> –ü—Ä–∏–º–µ–Ω—ë–Ω (—Å–∫–∏–¥–∫–∞: ${promo_discount}‚ÇΩ)`
    : `<b>–ü—Ä–æ–º–æ–∫–æ–¥:</b> –ù–µ –ø—Ä–∏–º–µ–Ω—ë–Ω`;
  const anonymousText = anonymous ? '–î–∞' : '–ù–µ—Ç';
  const whatsappText = whatsapp ? '–î–∞' : '–ù–µ—Ç';
  const postcardTextMessage = postcard_text ? postcard_text : '–ù–µ —É–∫–∞–∑–∞–Ω';
  const message = `<b>üÜï –ù–æ–≤—ã–π –∑–∞–∫–∞–∑ #${order.order_number}</b>
<b>–ò–º—è:</b> ${name}
<b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> ${phone}
<b>–°—É–º–º–∞:</b> ${total} ‚ÇΩ
<b>–ë–æ–Ω—É—Å—ã —Å–ø–∏—Å–∞–Ω–æ:</b> ${bonuses_used}
<b>–ë–æ–Ω—É—Å—ã –Ω–∞—á–∏—Å–ª–µ–Ω–æ:</b> ${bonus}
<b>–î–∞—Ç–∞/–í—Ä–µ–º—è:</b> ${date} ${time}
<b>–°–ø–æ—Å–æ–± –¥–æ—Å—Ç–∞–≤–∫–∏:</b> ${deliveryMethodText}
<b>–ê–¥—Ä–µ—Å:</b> ${address || '–ù–µ —É–∫–∞–∑–∞–Ω (—Å–∞–º–æ–≤—ã–≤–æ–∑)'}
<b>–ü–æ–ª—É—á–∞—Ç–µ–ª—å:</b> ${recipient}
<b>–û–ø–ª–∞—Ç–∞:</b> ${payment === 'cash' ? '–ù–∞–ª–∏—á–Ω—ã–µ' : '–û–Ω–ª–∞–π–Ω'}
<b>–ê–Ω–æ–Ω–∏–º–Ω—ã–π –∑–∞–∫–∞–∑:</b> ${anonymousText}
<b>–°–≤—è–∑—å —á–µ—Ä–µ–∑ WhatsApp:</b> ${whatsappText}
<b>–¢–µ–∫—Å—Ç –æ—Ç–∫—Ä—ã—Ç–∫–∏:</b> ${postcardTextMessage}
${promoText}

<b>–û—Å–Ω–æ–≤–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã:</b>
${itemsList}

<b>–î–æ–ø–æ–ª–Ω–µ–Ω–∏—è:</b>
${upsellList}`;

  // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram
  const telegramResponse = await fetch(`https://api.telegram.org/bot${TELEGRAM_TOKEN}/sendMessage`, {
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    body: JSON.stringify({
      chat_id: TELEGRAM_CHAT_ID,
      text: message,
      parse_mode: 'HTML',
    }),
  });

  if (!telegramResponse.ok) {
    console.error('Error sending Telegram message:', await telegramResponse.text());
    return NextResponse.json({ error: '–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è' }, { status: 500 });
  }

  return NextResponse.json({ success: true, order_id: order.order_number });
}