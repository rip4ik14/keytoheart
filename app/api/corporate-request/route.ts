import { NextResponse } from 'next/server';
import { prisma } from '@/lib/prisma';

const TOKEN = process.env.CORPORATE_TELEGRAM_BOT_TOKEN;
const CHAT_ID = process.env.CORPORATE_TELEGRAM_CHAT_ID;

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è HTML-—Å–∏–º–≤–æ–ª–æ–≤ –≤ Telegram-—Å–æ–æ–±—â–µ–Ω–∏–∏
const escapeHtml = (text: string) => {
  return text
    .replace(/&/g, '&')
    .replace(/</g, '<')
    .replace(/>/g, '>');
};

export async function POST(req: Request) {
  try {
    // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ñ–æ—Ä–º—ã
    const body = await req.json();
    const { name, company, phone, email, message } = body;

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
    if (!name || !phone || !email) {
      console.error('Validation error: Missing required fields', { name, phone, email });
      return NextResponse.json(
        { success: false, error: '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è.' },
        { status: 400 }
      );
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
    if (!phone || !/^\+7\d{10}$/.test(phone)) {
      console.error('Invalid phone format:', phone);
      return NextResponse.json(
        { success: false, error: '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞. –û–∂–∏–¥–∞–µ—Ç—Å—è —Ñ–æ—Ä–º–∞—Ç +7xxxxxxxxxx' },
        { status: 400 }
      );
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç email
    if (!/\S+@\S+\.\S+/.test(email)) {
      console.error('Invalid email format:', email);
      return NextResponse.json(
        { success: false, error: '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π email' },
        { status: 400 }
      );
    }

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞—è–≤–∫—É –≤ PostgreSQL —á–µ—Ä–µ–∑ Prisma
    console.log('Inserting into corporate_requests:', { name, company, phone, email, message });
    try {
      await prisma.corporate_requests.create({
        data: {
          name,
          company: company || null,
          phone,
          email,
          message: message || null,
          created_at: new Date(),
        },
      });
    } catch (dbError: any) {
      console.error('Prisma error:', dbError);
      return NextResponse.json(
        { success: false, error: '–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∑–∞—è–≤–∫–∏ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö: ' + dbError.message },
        { status: 500 }
      );
    }

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ Telegram (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
    if (TOKEN && CHAT_ID) {
      const telegramMessage = `
<b>üîî –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ —Å –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã</b>
<b>–ò–º—è:</b> ${escapeHtml(name || '‚Äî')}
<b>–ö–æ–º–ø–∞–Ω–∏—è:</b> ${escapeHtml(company || '–ù–µ —É–∫–∞–∑–∞–Ω–∞')}
<b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> ${escapeHtml(phone || '‚Äî')}
<b>E-mail:</b> ${escapeHtml(email || '‚Äî')}
<b>–°–æ–æ–±—â–µ–Ω–∏–µ:</b> ${escapeHtml(message || '–ù–µ—Ç')}
      `.trim();

      console.log('Sending Telegram message:', telegramMessage);
      const tgRes = await fetch(
        `https://api.telegram.org/bot${TOKEN}/sendMessage`,
        {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({
            chat_id: CHAT_ID,
            text: telegramMessage,
            parse_mode: 'HTML',
          }),
        }
      );

      if (!tgRes.ok) {
        const err = await tgRes.text();
        console.error('Telegram error:', err, 'Status:', tgRes.status);
        console.warn('Continuing despite Telegram error');
      } else {
        console.log('Telegram notification sent successfully', 'Status:', tgRes.status);
      }
    } else {
      console.warn('Corporate Telegram bot token or chat ID not set, skipping Telegram notification');
    }

    console.log('Successfully processed corporate request at', new Date().toISOString());
    return NextResponse.json({ success: true });
  } catch (e: any) {
    console.error('Server error at', new Date().toISOString(), ':', e);
    return NextResponse.json(
      { success: false, error: '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞—è–≤–∫–∏: ' + e.message },
      { status: 500 }
    );
  }
}