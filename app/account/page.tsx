// app/account/page.tsx
"use client";

import { useState, useEffect } from "react";
import { useRouter } from "next/navigation";
import {
  useSupabaseClient,
  useSession,
} from "@supabase/auth-helpers-react";
import { IMaskInput } from "react-imask";
import toast, { Toaster } from "react-hot-toast";
import Link from "next/link";
import { useCart } from "@context/CartContext";

export default function AccountPage() {
  const supabase = useSupabaseClient();
  const session = useSession();
  const router = useRouter();
  const { addItem } = useCart();

  const [phone, setPhone] = useState("");
  const [code, setCode] = useState("");
  const [step, setStep] = useState<"phone" | "code">("phone");
  const [orders, setOrders] = useState<any[]>([]);
  const [bonusData, setBonusData] = useState<any>(null);
  const [filterDays, setFilterDays] = useState(30);

  // –µ—Å–ª–∏ —É–∂–µ –∑–∞–ª–æ–≥–∏–Ω–µ–Ω ‚Äî –ø–æ–¥–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
  useEffect(() => {
    if (session) {
      fetchAccountData();
    }
  }, [session]);

  async function fetchAccountData() {
    // –°—É–ø–∞–±–µ–π—Å‚Äë–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–π RPC –∏–ª–∏ API‚Äë—Ä–æ—É—Ç—ã –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
    const { data: bonuses } = await supabase
      .from("bonuses")
      .select("bonus_balance, level, history:bonus_history(amount,reason,created_at)")
      .eq("phone", session.user.phone) // phone —Ö—Ä–∞–Ω–∏—Ç—Å—è –≤ user metadata
      .single();
    setBonusData(bonuses);

    const { data: ordersList } = await supabase
      .from("orders")
      .select(`
        id, created_at, total, bonuses_used, payment_method, status,
        order_items(quantity,price,product_id, products(title))
      `)
      .eq("phone", session.user.phone)
      .order("created_at", { ascending: false });
    setOrders(ordersList || []);
  }

  // 1. –û—Ç–ø—Ä–∞–≤–∫–∞ OTP
  const handlePhoneSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    const clean = phone.replace(/\D/g, "");
    if (clean.length !== 10) {
      return toast.error("–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä");
    }
    const { error } = await supabase.auth.signInWithOtp({
      phone: "+7" + clean,
      options: { redirectTo: window.location.origin + "/account" },
    });
    if (error) toast.error(error.message);
    else {
      toast.success("–ö–æ–¥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤–∞–º –≤ SMS");
      setStep("code");
    }
  };

  // 2. –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∫–æ–¥–∞
  const handleCodeSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    const { error } = await supabase.auth.verifyOtp({
      phone: "+7" + phone.replace(/\D/g, ""),
      token: code,
      type: "sms",
    });
    if (error) toast.error(error.message);
    else {
      toast.success("–£—Å–ø–µ—à–Ω–æ –≤–æ—à–ª–∏");
      // —Å–µ—Å—Å–∏—è –ø–æ–¥—Ç—è–Ω–µ—Ç—Å—è —á–µ—Ä–µ–∑ –ø—Ä–æ–≤–∞–π–¥–µ—Ä ‚Üí useEffect ‚Üí fetchAccountData()
    }
  };

  if (!session) {
    return (
      <div className="max-w-sm mx-auto py-10 px-4">
        <Toaster position="top-center" />
        {step === "phone" ? (
          <form onSubmit={handlePhoneSubmit} className="space-y-4">
            <h1 className="text-2xl font-bold">–í—Ö–æ–¥ –ø–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É</h1>
            <div className="flex gap-2">
              <span className="pt-2">+7</span>
              <IMaskInput
                mask="(000) 000-00-00"
                value={phone}
                onAccept={(val) => setPhone(val)}
                className="border p-2 rounded w-full"
                placeholder="(___) ___-__-__"
                required
              />
            </div>
            <button className="w-full bg-black text-white py-2 rounded">
              –ü–æ–ª—É—á–∏—Ç—å –∫–æ–¥
            </button>
          </form>
        ) : (
          <form onSubmit={handleCodeSubmit} className="space-y-4">
            <h1 className="text-2xl font-bold">–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥</h1>
            <input
              type="text"
              maxLength={6}
              value={code}
              onChange={(e) => setCode(e.target.value)}
              placeholder="–ö–æ–¥ –∏–∑ SMS"
              className="border p-2 rounded w-full"
              required
            />
            <button className="w-full bg-black text-white py-2 rounded">
              –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å
            </button>
          </form>
        )}
        <div className="mt-4 text-center text-sm text-gray-500">
          <Link href="/">‚Üê –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∫–∞—Ç–∞–ª–æ–≥</Link>
        </div>
      </div>
    );
  }

  // –ï—Å–ª–∏ –∑–∞–ª–æ–≥–∏–Ω–∏–ª–∏—Å—å ‚Äî –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–∞–±–∏–Ω–µ—Ç
  const filteredOrders = orders.filter((order) => {
    const date = new Date(order.created_at);
    const cutoff = new Date();
    cutoff.setDate(cutoff.getDate() - filterDays);
    return date >= cutoff;
  });

  return (
    <div className="max-w-3xl mx-auto px-4 py-10">
      <Toaster position="top-center" />
      <div className="text-right mb-4">
        <button
          className="text-sm text-gray-500 hover:underline"
          onClick={async () => {
            await supabase.auth.signOut();
            router.refresh();
          }}
        >
          –í—ã–π—Ç–∏
        </button>
      </div>

      {/* –ë–æ–Ω—É—Å–Ω—ã–π –±–∞–ª–∞–Ω—Å */}
      <div className="bg-gray-100 p-4 rounded mb-6">
        <h2 className="font-semibold mb-2">–ë–æ–Ω—É—Å–Ω—ã–π –±–∞–ª–∞–Ω—Å</h2>
        <p>{bonusData?.bonus_balance ?? 0} –±–æ–Ω—É—Å–æ–≤</p>
        <p className="text-sm text-gray-600">–£—Ä–æ–≤–µ–Ω—å: {bonusData?.level}</p>
      </div>

      {/* –ò—Å—Ç–æ—Ä–∏—è –±–æ–Ω—É—Å–æ–≤ */}
      {bonusData?.history?.length > 0 && (
        <div className="mb-8">
          <h3 className="font-semibold mb-2">–ò—Å—Ç–æ—Ä–∏—è –±–æ–Ω—É—Å–æ–≤</h3>
          <ul className="divide-y">
            {bonusData.history.map((h: any, i: number) => (
              <li key={i} className="py-2 flex justify-between">
                <span>
                  {h.reason} <br />
                  <small className="text-gray-500">
                    {new Date(h.created_at).toLocaleDateString("ru-RU")}
                  </small>
                </span>
                <span
                  className={`font-medium ${
                    h.amount > 0 ? "text-green-600" : "text-red-500"
                  }`}
                >
                  {h.amount > 0 ? "+" : ""}
                  {h.amount}
                </span>
              </li>
            ))}
          </ul>
        </div>
      )}

      {/* –§–∏–ª—å—Ç—Ä –∑–∞–∫–∞–∑–æ–≤ */}
      <div className="flex items-center gap-2 mb-4 text-sm">
        <label>–ü–æ–∫–∞–∑–∞—Ç—å –∑–∞:</label>
        <select
          className="border p-1 rounded"
          value={filterDays}
          onChange={(e) => setFilterDays(+e.target.value)}
        >
          <option value={7}>7 –¥–Ω–µ–π</option>
          <option value={30}>30 –¥–Ω–µ–π</option>
          <option value={90}>90 –¥–Ω–µ–π</option>
          <option value={365}>–ì–æ–¥</option>
          <option value={9999}>–í—Å–µ</option>
        </select>
      </div>

      {/* –°–ø–∏—Å–æ–∫ –∑–∞–∫–∞–∑–æ–≤ */}
      {filteredOrders.length === 0 ? (
        <p className="text-gray-500">–ù–µ—Ç –∑–∞–∫–∞–∑–æ–≤ –∑–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥.</p>
      ) : (
        <div className="space-y-6">
          {filteredOrders.map((order) => (
            <div
              key={order.id}
              className="border p-4 rounded shadow-sm bg-white"
            >
              <div className="flex justify-between text-sm text-gray-600 mb-2">
                <span>
                  –ó–∞–∫–∞–∑ –æ—Ç{" "}
                  <b>
                    {new Date(order.created_at).toLocaleDateString("ru-RU")}
                  </b>
                </span>
                <span>
                  {order.payment_method === "cash" ? "–ù–∞–ª–∏—á–Ω—ã–µ" : "–û–Ω–ª–∞–π–Ω"}
                </span>
              </div>
              <div className="text-sm mb-2">
                <span>–°—É–º–º–∞: </span>
                <b>{order.total} ‚ÇΩ</b>, –±–æ–Ω—É—Å–æ–≤ —Å–ø–∏—Å–∞–Ω–æ:{" "}
                <b>{order.bonuses_used || 0}</b>
              </div>
              <ul className="list-disc ml-5 text-sm">
                {order.order_items.map((it: any, idx: number) => (
                  <li key={idx}>
                    {it.products.title} √ó{it.quantity} ={" "}
                    {it.price * it.quantity} ‚ÇΩ
                  </li>
                ))}
              </ul>
              <button
                className="mt-2 text-blue-600 text-sm hover:underline"
                onClick={() => {
                  // –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –∑–∞–∫–∞–∑
                  const draft = {
                    items: order.order_items.map((it: any) => ({
                      id: it.product_id,
                      title: it.products.title,
                      price: it.price,
                      quantity: it.quantity,
                      imageUrl: it.products.cover_url || "/no-image.jpg",
                    })),
                  };
                  localStorage.setItem("repeatDraft", JSON.stringify(draft));
                  toast.success("–ó–∞–∫–∞–∑ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω –≤ –∫–æ—Ä–∑–∏–Ω—É");
                  router.push("/cart");
                }}
              >
                üîÅ –ü–æ–≤—Ç–æ—Ä–∏—Ç—å –∑–∞–∫–∞–∑
              </button>
            </div>
          ))}
        </div>
      )}
    </div>
);
