// –ü—É—Ç—å: app/admin/products/page.tsx

'use client';

import { useEffect, useState } from "react";
import Link from "next/link";
import { supabasePublic as supabase } from "@/lib/supabase/public";

export default function AdminProductsPage() {
  const [products, setProducts] = useState<any[]>([]);
  const [loading, setLoading] = useState(true);
  const [categoryFilter, setCategoryFilter] = useState("all");

  useEffect(() => {
    fetchProducts();
  }, []);

  async function fetchProducts() {
    setLoading(true);
    const { data, error } = await supabase.from("products").select("*");
    if (error) {
      console.error("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–æ–≤–∞—Ä–æ–≤:", error.message);
    } else {
      setProducts(data || []);
    }
    setLoading(false);
  }

  async function deleteProduct(id: number) {
    if (!confirm("–í—ã —Ç–æ—á–Ω–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä?")) return;
    const { error } = await supabase.from("products").delete().eq("id", id);
    if (error) {
      alert("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏: " + error.message);
    } else {
      alert("‚úÖ –¢–æ–≤–∞—Ä —É–¥–∞–ª—ë–Ω");
      fetchProducts();
    }
  }

  async function toggleInStock(id: number, current: boolean) {
    const res = await fetch("/api/toggle-stock", {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify({ id, in_stock: !current }),
    });
    const { success, error } = await res.json();
    if (!success) {
      alert("–û—à–∏–±–∫–∞: " + error);
    } else {
      fetchProducts();
    }
  }

  const categories = ["all", "–ö–ª—É–±–Ω–∏—á–Ω—ã–µ –±—É–∫–µ—Ç—ã", "–¶–≤–µ—Ç—ã", "–ö–æ–º–±–æ-–Ω–∞–±–æ—Ä—ã", "Premium", "–ü–æ–¥–∞—Ä–∫–∏"];
  const filteredProducts =
    categoryFilter === "all"
      ? products
      : products.filter((p) => p.category === categoryFilter);

  return (
    <div className="max-w-5xl mx-auto py-10 px-4">
      <div className="flex justify-between items-center mb-6">
        <h1 className="text-3xl font-bold">–í—Å–µ —Ç–æ–≤–∞—Ä—ã</h1>
        <Link
          href="/admin/add-product"
          className="bg-orange-500 text-white px-4 py-2 rounded hover:bg-orange-600"
        >
          ‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä
        </Link>
      </div>

      <div className="mb-4">
        <select
          value={categoryFilter}
          onChange={(e) => setCategoryFilter(e.target.value)}
          className="border px-2 py-1 rounded"
        >
          {categories.map((cat) => (
            <option key={cat} value={cat}>
              {cat === "all" ? "–í—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏" : cat}
            </option>
          ))}
        </select>
      </div>

      {loading ? (
        <div>–ó–∞–≥—Ä—É–∑–∫–∞...</div>
      ) : (
        <table className="min-w-full border rounded">
          <thead className="bg-gray-100">
            <tr>
              <th className="px-4 py-2 border">–ù–∞–∑–≤–∞–Ω–∏–µ</th>
              <th className="px-4 py-2 border">–¶–µ–Ω–∞</th>
              <th className="px-4 py-2 border">–ö–∞—Ç–µ–≥–æ—Ä–∏—è</th>
              <th className="px-4 py-2 border">–§–æ—Ç–æ</th>
              <th className="px-4 py-2 border">–°—Ç–∞—Ç—É—Å</th>
              <th className="px-4 py-2 border">–î–µ–π—Å—Ç–≤–∏—è</th>
            </tr>
          </thead>
          <tbody>
            {filteredProducts.map((product) => (
              <tr key={product.id}>
                <td className="px-4 py-2 border">{product.title}</td>
                <td className="px-4 py-2 border">{product.price} ‚ÇΩ</td>
                <td className="px-4 py-2 border">{product.category}</td>
                <td className="px-4 py-2 border">{product.images?.length || 0}</td>
                <td className="px-4 py-2 border">
                  <button
                    onClick={() => toggleInStock(product.id, product.in_stock)}
                    className={`px-2 py-1 text-white rounded ${
                      product.in_stock ? "bg-green-500" : "bg-gray-500"
                    }`}
                  >
                    {product.in_stock ? "–í –Ω–∞–ª–∏—á–∏–∏" : "–°–∫—Ä—ã—Ç"}
                  </button>
                </td>
                <td className="px-4 py-2 border flex gap-2">
                  <Link href={`/admin/products/${product.id}`} className="text-blue-600">
                    ‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å
                  </Link>
                  <button
                    onClick={() => deleteProduct(product.id)}
                    className="text-red-600"
                  >
                    üóëÔ∏è –£–¥–∞–ª–∏—Ç—å
                  </button>
                </td>
              </tr>
            ))}
          </tbody>
        </table>
      )}
    </div>
  );
}
